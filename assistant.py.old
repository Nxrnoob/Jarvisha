import subprocess
import threading
import time
import os
import json
from flask import Flask, request, jsonify, send_from_directory
from flask_cors import CORS
from TTS.api import TTS

app = Flask(__name__)
CORS(app)

# TTS initialization
tts = TTS(model_name="tts_models/en/jenny/jenny", progress_bar=False, gpu=True)

# Static audio folder
AUDIO_DIR = "audio"
os.makedirs(AUDIO_DIR, exist_ok=True)

# Paths to JSON files
STUDENT_FILE = "backend/data/students.json"
PROFESSOR_FILE = "backend/data/professors.json"

def load_data(file_path):
    if not os.path.exists(file_path):
        with open(file_path, "w") as f:
            json.dump({}, f)
    with open(file_path, "r") as f:
        return json.load(f)

def save_data(file_path, data):
    with open(file_path, "w") as f:
        json.dump(data, f, indent=4)

@app.route("/")
def home():
    return jsonify({"status": "Backend is running."})

@app.route("/query", methods=["POST"])
def handle_query():
    data = request.get_json()
    question = data.get("question", "").lower()

    students = load_data(STUDENT_FILE)
    professors = load_data(PROFESSOR_FILE)
    student = next(iter(students.values()), {})
    professor = next(iter(professors.values()), {})

    if "marks" in question:
        answer = f"{student.get('name', 'The student')}'s marks are {student.get('marks', 'not available')}."
    elif "attendance" in question:
        answer = f"{student.get('name', 'The student')} has {student.get('attendance', 'not recorded')}% attendance."
    elif "advice" in question or "improve" in question:
        answer = student.get('advice', "Try revising regularly.")
    elif "subject" in question:
        answer = f"Prof. {professor.get('name', 'Unknown')} teaches {professor.get('subject', 'a subject')}."
    elif "email" in question or "contact" in question:
        answer = f"You can email Prof. {professor.get('name', 'Unknown')} at {professor.get('email', 'not available')}."
    else:
        answer = "I'm not sure about that."

    return jsonify({"answer": answer})

@app.route("/speak", methods=["POST"])
@app.route('/speak', methods=['POST'])
def speak():
    try:
        data = request.get_json()
        text = data.get("text", "")

        # Clean weird characters that can break TTS
        cleaned_text = text.replace("%%", "%").replace("\n", " ").strip()

        # Optionally split long texts
        max_chunk_len = 300  # split if necessary
        if len(cleaned_text) > max_chunk_len:
            print("⚠️ Splitting long response for TTS...")
            chunks = [cleaned_text[i:i+max_chunk_len] for i in range(0, len(cleaned_text), max_chunk_len)]
            combined_audio = AudioSegment.silent(duration=0)
            for chunk in chunks:
                tts.tts_to_file(text=chunk, file_path="temp_chunk.wav")
                chunk_audio = AudioSegment.from_wav("temp_chunk.wav")
                combined_audio += chunk_audio
            combined_audio.export("frontend/public/output.wav", format="wav")
        else:
            tts.tts_to_file(text=cleaned_text, file_path="frontend/public/output.wav")

        return jsonify({"status": "ok"}), 200

    except Exception as e:
        print("TTS error:", e)
        return jsonify({"error": "TTS processing failed"}), 500
@app.route("/audio/<filename>")
def serve_audio(filename):
    return send_from_directory(AUDIO_DIR, filename, mimetype="audio/wav")

def start_react_frontend():
    try:
        subprocess.Popen(["npm", "start"], cwd="frontend")
    except Exception as e:
        print("Error starting frontend:", e)

def start_flask_backend():
    app.run(debug=True, port=5000)

if __name__ == "__main__":
    threading.Thread(target=start_react_frontend).start()
    time.sleep(5)
    start_flask_backend()

